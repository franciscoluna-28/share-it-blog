---
import TalentCard from '@components/TalentCard.astro'
import Layout from '@layouts/Layout.astro'
import { areas, talents } from 'src/utils/talents'
import './styles.css'
---

<Layout title='Talento | Share IT' showBackButton>
  <h1 class='text-4xl font-bold text-center mb-8 text-white'>
    Talento en Share IT recomendado
  </h1>
  <div class='mb-8'>
    <div class='flex gap-4 items-center'>
      <label for='area' class='text-white'>Filtrar por área:</label>
      <select
        id='area'
        class='bg-slate-800 text-white border border-secondary rounded-lg px-4 py-2 focus:border-primary
        focus:outline-none'
      >
        <option value='all'>Todas las áreas</option>
        {areas.map((area) => <option value={area}>{area}</option>)}
      </select>
    </div>
  </div>

  <div id='talents-grid' class='grid grid-cols-1 md:grid-cols-2 gap-4'>
    {
      talents.map((talent) => (
        <div class='talent-card' data-area={talent.area}>
          <TalentCard
            id={talent.id}
            name={talent.name}
            area={talent.area}
            experience={talent.experience}
            description={talent.description}
            skills={talent.skills}
            github={talent.github || ''}
            linkedin={talent.linkedin || ''}
            portfolio={talent.portfolio || ''}
            avatar={
              talent.avatar ||
              'https://gravatar.com/avatar/30fecbbddf786bfaed35fbebbb5df6ea?s=400&d=robohash&r=x'
            }
          />
        </div>
      ))
    }
    <p id='no-results' class='hidden text-center text-gray-400 py-12'>
      No se encontraron talentos en esta área.
    </p>
  </div>
</Layout>

<script>
  const areaSelect = document.getElementById('area') as HTMLSelectElement
  const talentCards = document.querySelectorAll('.talent-card')
  const noResults = document.getElementById('no-results')
  const talentsGrid = document.getElementById('talents-grid')

  function filterTalents(selectedArea: string) {
    let visibleCount = 0

    talentCards.forEach((card) => {
      const cardArea = card.getAttribute('data-area')
      const shouldShow = selectedArea === 'all' || cardArea === selectedArea

      if (shouldShow) {
        card.classList.remove('hidden-card')
        visibleCount++
      } else {
        card.classList.add('hidden-card')
      }
    })

    // Show/hide no results message
    if (visibleCount === 0) {
      noResults.classList.remove('hidden')
      talentsGrid.classList.add('hidden')
    } else {
      noResults.classList.add('hidden')
      talentsGrid.classList.remove('hidden')
    }
  }

  // Initialize filter state from URL if present
  const urlParams = new URLSearchParams(window.location.search)
  const initialArea = urlParams.get('area') || 'all'
  areaSelect.value = initialArea
  filterTalents(initialArea)

  // Handle filter changes
  areaSelect.addEventListener('change', (e) => {
    const selectedArea = (e.target as HTMLSelectElement).value

    // Update URL without page reload
    const url = new URL(window.location.href)
    if (selectedArea === 'all') {
      url.searchParams.delete('area')
    } else {
      url.searchParams.set('area', selectedArea)
    }
    window.history.pushState({}, '', url)

    filterTalents(selectedArea)
  })

  // Handle browser back/forward buttons
  window.addEventListener('popstate', () => {
    const urlParams = new URLSearchParams(window.location.search)
    const area = urlParams.get('area') || 'all'
    areaSelect.value = area
    filterTalents(area)
  })
</script>
